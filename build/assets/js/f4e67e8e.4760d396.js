"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3269],{267:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Combine AWS/deploying-maintaining/EKS/eks-101","title":"EKS 101","description":"What is EKS? How do you support it? It\'s a lot of fun!","source":"@site/docs/Combine AWS/deploying-maintaining/EKS/eks-101.md","sourceDirName":"Combine AWS/deploying-maintaining/EKS","slug":"/Combine AWS/deploying-maintaining/EKS/eks-101","permalink":"/Combine AWS/deploying-maintaining/EKS/eks-101","draft":false,"unlisted":false,"editUrl":"https://github.com/Combine-Pathfinder-Palisade/combine-docs/blob/main/docs/Combine AWS/deploying-maintaining/EKS/eks-101.md","tags":[],"version":"current","lastUpdatedBy":"github-actions","lastUpdatedAt":1739223322000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"How To: Update Combine Service Parity Definitions","permalink":"/Combine AWS/deploying-maintaining/how-tos/how-to-update-service-parity"},"next":{"title":"Account Switch Links","permalink":"/Combine AWS/deploying-maintaining/account-switching"}}');var i=s(4848),o=s(8453);const r={},a="EKS 101",l={},c=[];function h(e){const n={a:"a",code:"code",h1:"h1",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"eks-101",children:"EKS 101"})}),"\n",(0,i.jsx)(n.p,{children:"What is EKS? How do you support it? It's a lot of fun!"}),"\n",(0,i.jsx)(n.p,{children:"Raw content from discussions with Matt:"}),"\n",(0,i.jsx)(n.p,{children:"Notes from EKS Session with Matt:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["If a new customer wants/needs to use combine imds proxy (we only want to give it to them if the NEED to use IMDS, but it\u2019ll require a code change anyway, so they might not want to use it after all)","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"pull it down from our public ECR, push back up to their own ECR from within Combine"}),"\n",(0,i.jsx)(n.li,{children:"Action Item for each of us - look at the combine-proxy-imds repo, the docs are very nice"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["learn how the customer is deploying EKS","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"through terraform, or some other means"}),"\n",(0,i.jsxs)(n.li,{children:["there\u2019s configuration in terraform vs just EKS in the console","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"more often than not customers use terraform"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Things to tell them","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"EKS nodes need to be able to trust the Combine CA chain (like we do for normal VMs)"}),"\n",(0,i.jsxs)(n.li,{children:["A lot of things around IRSA (IAM Roles for Service Accounts)","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"IRSA"})," needs to have the emulated IAM ARNs, because they run on the nodes inside the Combine VPC"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"aws-auth"})," config map needs to be commercial"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"only thing in the kubeconfig that gets emulated is the server endpoint url"}),"\n",(0,i.jsxs)(n.li,{children:["EBS-CSI driver versions newer than 1.32 return a new CreateVolume topology name","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"but we got around this by adding the user agent fix (Daniel will update this message with a link to that fix, it was with SF before Stephen left)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Miscellaneous","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["there are cases where customers will need an ingress subnet","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"there\u2019s a load balancer controller plugin that can set up load balancers as ingresses into the cluster"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["IMDS Proxy improvements (IMDS PROXY DEPRECATED, DO NOT TALK ABOUT IT)","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"some endpoints needs to be updated"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["When a pod stands up in k8s, it doesn\u2019t have an IP. So when it makes its first call to the IMDS proxy, it\u2019s IP might not be in the list of approved IPs; the proxy might reject it. As part of that process, proxy will refresh its list of IPs, then if it\u2019s still not in there, then it\u2019ll reject it. The refresh might be fast enough that it \u2018beats\u2019 the IP assigned to the pod","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"in the case of the ebs-csi driver, it only tries twice before giving up"}),"\n",(0,i.jsx)(n.li,{children:"i.e. there needs to be an improvement with how the refresh works, maybe set up an exponential backoff"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Some good resources"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["IRSA - IAM roles for Service Accounts Article - ",(0,i.jsx)(n.a,{href:"https://medium.com/@ankit.wal/the-how-of-iam-roles-for-service-accounts-irsa-on-aws-eks-3d76badb8942",children:"https://medium.com/@ankit.wal/the-how-of-iam-roles-for-service-accounts-irsa-on-aws-eks-3d76badb8942"})]}),"\n",(0,i.jsxs)(n.li,{children:["4 hour YouTube course on Vanilla Kubernetes - ",(0,i.jsx)(n.a,{href:"https://www.youtube.com/watch?v=X48VuDVv0do",children:"https://www.youtube.com/watch?v=X48VuDVv0do"})]}),"\n",(0,i.jsx)(n.li,{children:"Full EKS course on Kubernetes (don\u2019t know of any right now)"}),"\n",(0,i.jsx)(n.li,{children:"the kubernetes config parameters in the emulation.config in combine-aws"}),"\n",(0,i.jsx)(n.li,{children:"the kubernetes rewriters in combine-aws"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"combine-imds-proxy"})," repository (only for historical purposes)"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"the cluster role in cisco has these permissions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"eks cluster policy"}),"\n",(0,i.jsx)(n.li,{children:"eks cluster vpc controller"}),"\n",(0,i.jsxs)(n.li,{children:["allow for KMS, required for EKS encryption","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"there's no way to set EKS encryption at the customer for TS"}),"\n",(0,i.jsx)(n.li,{children:"the permissions on WLDEVELOPER do not support creating a KMS key grant, and the permissions on the KeyManager role do not let them list eks clusters"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"deny for resource groups"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Users can create roles as long as they're prefixed by PROJECT_ and bounded by the Permissions Boundary ",(0,i.jsx)(n.code,{children:"PB-WLDEVELOPER"}),", required by S or TS customer"]}),"\n",(0,i.jsx)(n.p,{children:"EVERY ROLE related to EKS has to be prefixed by PROJECT_"}),"\n",(0,i.jsx)(n.p,{children:"TO stand up a cluster"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"create role"}),"\n",(0,i.jsx)(n.li,{children:"create cluster"}),"\n",(0,i.jsx)(n.li,{children:"create oidc provider"}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"not done by WLDEVELOPER, (Cisco uses CUSTOMERIT) or a Sequoia admin"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Repeat steps 1 & 2 for the node groups,"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Create node group role(s)"}),"\n",(0,i.jsx)(n.li,{children:"create node groups"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"For VPC-only clusters: if the SG on the cluster does not include the cidr block of the node groups, the node groups will not be able to join the cluster. Does not apply to public clusters."}),"\n",(0,i.jsx)(n.p,{children:"OIDC provider is there for IRSA. service accounts can use the OIDC provider to assume a role in AWS"}),"\n",(0,i.jsx)(n.p,{children:"once the cluster is created, you take the OIDC provider url and put in the trust policy"}),"\n",(0,i.jsx)(n.p,{children:"trust policy for a PROJECT_aws-ebs-csi-driver-controller POD role:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'{\n    "Version": "2012-10-17",\n    "Statement": [\n        {\n            "Effect": "Allow",\n            "Principal": {\n                "Federated": "arn:aws:iam::663117128738:oidc-provider/oidc.eks.us-east-1.amazonaws.com/id/7435A97694DAE25C2079AC8D8B66D242" oidc provider arn\n            },\n            "Action": "sts:AssumeRoleWithWebIdentity",\n            "Condition": {\n                "StringEquals": {\n                    "oidc.eks.us-east-1.amazonaws.com/id/7435A97694DAE25C2079AC8D8B66D242:sub": "system:serviceaccount:kube-system:ebs-csi-controller-sa", needs to be the \'path\' of the service account \n                    "oidc.eks.us-east-1.amazonaws.com/id/7435A97694DAE25C2079AC8D8B66D242:aud": "sts.amazonaws.com" needs to match the sts endpoint on the oidc provider, \n                }\n            }\n        },\n        {\n            "Sid": "CombineInjectedServicePrincipal",\n            "Effect": "Allow",\n            "Principal": {\n                "AWS": "arn:aws:iam::663117128738:root"\n            },\n            "Action": "sts:AssumeRole"\n        }\n    ]\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Service Account sample:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'{\n  "kind": "ServiceAccount",\n  "apiVersion": "v1",\n  "metadata": {\n    "name": "ebs-csi-controller-sa",\n    "namespace": "kube-system",\n    "uid": "8339dcbd-119b-4f5f-84ae-a1e7a8c24192",\n    "resourceVersion": "179402",\n    "creationTimestamp": "2024-09-18T21:56:08Z",\n    "labels": {\n      "app.kubernetes.io/component": "csi-driver",\n      "app.kubernetes.io/instance": "aws-ebs-csi-driver",\n      "app.kubernetes.io/managed-by": "Helm",\n      "app.kubernetes.io/name": "aws-ebs-csi-driver",\n      "app.kubernetes.io/version": "1.33.0",\n      "helm.sh/chart": "aws-ebs-csi-driver-2.33.0"\n    },\n    "annotations": {\n      "eks.amazonaws.com/audience": "sts.amazonaws.com",\n      "eks.amazonaws.com/role-arn": "arn:aws-iso:iam::663117128738:role/PROJECT_aws-ebs-csi-driver-controller",\n      "meta.helm.sh/release-name": "aws-ebs-csi-driver",\n      "meta.helm.sh/release-namespace": "kube-system"\n    }\n  },\n  "automountServiceAccountToken": true\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"the annotations matter, the audience has to match the sts endpoint from above, the role arn needs to match the role\nthe pod will get created with an sts token that has the role"}),"\n",(0,i.jsxs)(n.p,{children:["here's a pod that's using the irsa\nthe serviceAccountToken listed in the voume needs to match the audience for the STS account token\nthe aws-iam-token volume is the one to look at\nthis automount is a flag in most helm charts ",(0,i.jsx)(n.a,{href:"https://github.com/kubernetes-sigs/aws-ebs-csi-driver/blob/master/charts/aws-ebs-csi-driver/values.yaml#L397",children:"https://github.com/kubernetes-sigs/aws-ebs-csi-driver/blob/master/charts/aws-ebs-csi-driver/values.yaml#L397"})]}),"\n",(0,i.jsxs)(n.p,{children:["The terraform in ",(0,i.jsx)(n.code,{children:"combine-terraform"})," does this; release sparingly to customers, as it is very complex and requires helm and other stuff."]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var t=s(6540);const i={},o=t.createContext(i);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);