{"searchDocs":[{"title":"Account Switch Links","type":0,"sectionRef":"#","url":"/Combine AWS/deploying-maintaining/account-switching","content":"Account Switch Links SalesForce: SpcsDevSSDevJDev1JStage1SRQDev1 SDev2 SStage Others: AltanaBehavioral SignalsBrightSpotCloud Bolt - CleanCaveonixCitrixCisco - MAP DevCisco - MAP Dev Client AccountsCisco - MAP TestCisco - MAP Test Client AccountsCisco - W4GD2IQDellGigamonInstabaseJuliaMcAfee/TrellixPalantirPalantir - SC2S - 1Palantir - SC2S - 2Palantir - BucatiniPalo Alto XSOARRancher FederalRegScaleRendered.AISayariServiceNowSequoia Internal: Account TestSequoia Internal: Account Test: Test Role App ASequoia Internal: DemoTax BitTRM LabsZScalerSpectro Cloud ","keywords":"","version":"Next"},{"title":"How To: Delete/Uninstall a Combine Deployment","type":0,"sectionRef":"#","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-delete-combine-deployment","content":"How To: Delete/Uninstall a Combine Deployment Remove any resources you created within each Combine VPC.Empty the combine-&lt;shard id&gt;-app-storage-&lt;account number&gt; and combine-&lt;shard id&gt;-app-storage-&lt;account number&gt;-public buckets.Delete each Combine VPC CloudFormation stack. (These are typically named Combine-VPC-&lt;Id&gt; but are also identified by a CombineId Output Value of combine-vpc.)Delete any Combine EC2 Keys. -- If shard id was not set these are named Combine and CombineRestricted. -- If shard id was set these are named Combine&lt;ShardId&gt; and Combine&lt;ShardId&gt;Restricted.Delete any Combine ACM Certificates (if you are on 3.13.1 or before).Delete the Combine Policy CloudFormation stack. (This is typically named Combine-Policy but are also identified by a CombineId Output Value of combine-policy.)Delete the Combine CloudFormation stack. (This is typically named Combine. In 3.13.2.1 and later this is also identified by a CombineId Output Value of combine.)","keywords":"","version":"Next"},{"title":"Customer Contacts Spreadsheet","type":0,"sectionRef":"#","url":"/Combine AWS/deploying-maintaining/aws-customer-contacts","content":"","keywords":"","version":"Next"},{"title":"CHANGES VIA THIS EMBEDDED VIEW WILL NOT BE SAVED; you can edit it hereâ€‹","type":1,"pageTitle":"Customer Contacts Spreadsheet","url":"/Combine AWS/deploying-maintaining/aws-customer-contacts#changes-via-this-embedded-view-will-not-be-saved-you-can-edit-it-here","content":"  ","version":"Next","tagName":"h3"},{"title":"How To: Modify Customer Firewall Rules","type":0,"sectionRef":"#","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-configure-customer-firewall","content":"","keywords":"","version":"Next"},{"title":"Stepsâ€‹","type":1,"pageTitle":"How To: Modify Customer Firewall Rules","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-configure-customer-firewall#steps","content":" Log in to AWS Access the customer's account. Navigate to VPC In AWS, search for &quot;VPC&quot;.Open the VPC Dashboard. Locate Network Firewall Rule Groups In the VPC Dashboard, go to Network Firewall &gt; Network Firewall Rule Groups.Find one of the following rule groups: Combine-Private-Rule-Allow-DefaultCombine-Custom-Rule-GroupNote: The age of the deployment will dictate the name of the rule set. Edit the Rule Set Click on the rule set name.Locate the &quot;Rules&quot; bubble on the page and click Edit. Tip: The rule edit textbox can be expanded using the handle on the bottom-right corner.All rules are Suricata-compatible rule strings. Modify Rules For HTTPS traffic: Look for pre-existing pass tls and pass http rules.For TCP traffic: Add rules to accommodate multiple protocol types if needed.    ","version":"Next","tagName":"h2"},{"title":"Example Rulesâ€‹","type":1,"pageTitle":"How To: Modify Customer Firewall Rules","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-configure-customer-firewall#example-rules","content":" ","version":"Next","tagName":"h2"},{"title":"Domain Name-Based Rule for HTTPSâ€‹","type":1,"pageTitle":"How To: Modify Customer Firewall Rules","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-configure-customer-firewall#domain-name-based-rule-for-https","content":" pass tls any any -&gt; any any (msg:&quot;White List&quot;; flow:to_server; tls.sni; content:&quot;labs-us-1.customer.com&quot;; nocase; endswith; ssl_state:client_hello; sid:1005; rev:1;) pass http any any -&gt; any any (msg:&quot;White List&quot;; content:&quot;labs-us-1.customer.com&quot;; http_host; endswith; sid:1006; rev:1;)   Notes: The content tag contains the target URL.Ensure there are: No slashes (/) at the end of the URL.No http prefix in the URL. The sid and rev numbers at the end of the rule must be unique.    ","version":"Next","tagName":"h3"},{"title":"Static IP Address-Based Rule for TCP Trafficâ€‹","type":1,"pageTitle":"How To: Modify Customer Firewall Rules","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-configure-customer-firewall#static-ip-address-based-rule-for-tcp-traffic","content":" pass tcp any any -&gt; 123.219.224.223 any (msg:&quot;White List TLS for labs-us-1.customer.com IP&quot;; flow:to_server, established; sid:1007; rev:1;) pass tcp any any -&gt; 123.197.107.234 any (msg:&quot;White List TLS for labs-us-1.customer.com IP&quot;; flow:to_server, established; sid:1008; rev:1;) pass tcp any any -&gt; 123.219.224.179 any (msg:&quot;White List TLS for labs-us-1.customer.com IP&quot;; flow:to_server, established; sid:1009; rev:1;)    ","version":"Next","tagName":"h3"},{"title":"How to handle java.io.IOException: Broken pipe","type":0,"sectionRef":"#","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-handle-java-broken-pipe","content":"How to handle java.io.IOException: Broken pipe This issue happens when the endpoints server tries to do rewriting on a large payload. The error can be found in the Endpoints server log group in CloudWatch (ends in _Log_Group_Endpoint), and looks something like: &quot;errorLog&quot;: [ { &quot;errorMessage&quot;: &quot;Could not proxy request!&quot;, &quot;error&quot;: [ &quot;org.apache.catalina.connector.ClientAbortException: java.io.IOException: Broken pipe&quot;, // ðŸ‘ˆ &quot;\\tat org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:341)&quot;, &quot;\\tat org.apache.catalina.connector.OutputBuffer.flushByteBuffer(OutputBuffer.java:776)&quot;, ... To fix it, you can try to lower the tunneling threshold with these two parameters in configuration (these would be entries in the combine-configuration DynamoDb table): combine.endpoints.aws.request.tunneling.thresholdcombine.endpoints.aws.response.tunneling.threshold The default for these is 2147483647, try setting them to 134217728. To do this via DynamoDb, create an item and set parameter_name to combine.endpoints.aws.request.tunneling.threshold, and add an attribute for parameter_value with the value set to 134217728, shown below:","keywords":"","version":"Next"},{"title":"How To: Deploy Combine to an Isolated Customer","type":0,"sectionRef":"#","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-deploy-to-isolated-customer","content":"","keywords":"","version":"Next"},{"title":"Prequisitesâ€‹","type":1,"pageTitle":"How To: Deploy Combine to an Isolated Customer","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-deploy-to-isolated-customer#prequisites","content":" ","version":"Next","tagName":"h2"},{"title":"Prepare Deployment JARâ€‹","type":1,"pageTitle":"How To: Deploy Combine to an Isolated Customer","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-deploy-to-isolated-customer#prepare-deployment-jar","content":" ","version":"Next","tagName":"h2"},{"title":"Prepare support.zipâ€‹","type":1,"pageTitle":"How To: Deploy Combine to an Isolated Customer","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-deploy-to-isolated-customer#prepare-supportzip","content":" ","version":"Next","tagName":"h2"},{"title":"Commandsâ€‹","type":1,"pageTitle":"How To: Deploy Combine to an Isolated Customer","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-deploy-to-isolated-customer#commands","content":"","version":"Next","tagName":"h2"},{"title":"How To: Configure AirGap Layer","type":0,"sectionRef":"#","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-configure-airgap","content":"","keywords":"","version":"Next"},{"title":"Build/Destroy Firewallâ€‹","type":1,"pageTitle":"How To: Configure AirGap Layer","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-configure-airgap#builddestroy-firewall","content":" This is the most dramatic option. In the combine-vpc.yaml template there is a configuration parameter pair:  CombineFirewallPrivateBuildCombineFirewallPublicBuild  Setting either of these to false completely destroys the respective Firewall and Firewall resources and routes outbound traffic directly to the NAT Gateway / IGW.  ","version":"Next","tagName":"h2"},{"title":"Enable/Disable Firewall (\"Dropping the AirGap Layer\")â€‹","type":1,"pageTitle":"How To: Configure AirGap Layer","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-configure-airgap#enabledisable-firewall-dropping-the-airgap-layer","content":" You have the option to stop routing outbound traffic through a Firewall through the following configuration parameter:  EnableAirgap  Setting this to false leaves Firewall resources instact but chains the route table so outbound traffic bypasses its respective Firewall and routes directly to the NAT Gateway / IGW.  ","version":"Next","tagName":"h2"},{"title":"Enable/Disable Firewall Permissive Modeâ€‹","type":1,"pageTitle":"How To: Configure AirGap Layer","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-configure-airgap#enabledisable-firewall-permissive-mode","content":" You have the option to allow all outbound traffic but still log each outbound connection on the TAP Dashboard as a Violation through the following configuration parameter:  EnableAirgapPermissiveMode  Setting this to true while the Firewall is in operation (assuming the build flag and EnableAirgap configuration parameters are true) allows all outbound traffic but still throws a Violation for each outbound call.  ","version":"Next","tagName":"h2"},{"title":"Add Exeception Listâ€‹","type":1,"pageTitle":"How To: Configure AirGap Layer","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-configure-airgap#add-exeception-list","content":" You have the option to create an exception list for each Firewall. This allows individual domains to be exempted from the airgap layer.  If this account does not have an override rule group already you will need to create one.  ","version":"Next","tagName":"h2"},{"title":"Create Network Rule Groupâ€‹","type":1,"pageTitle":"How To: Configure AirGap Layer","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-configure-airgap#create-network-rule-group","content":" To do this, you must create an AWS Network Firewall Rule Group.  Go to VPC Dashboard. On the left navigation list under Network Firewall there is a Network Firewall rule groups page. Click Create Rule Group. Choose Stateful rule group. Choose Suricata compatible rule string under Rule group format. Choose Strict order.  Click Next.  Choose a name. Recommended: Combine-Firewall-Override-List. Choose a capacity. Recommended: 4092.  For IP set variables you probably want to create a variable with the Variable name of VpcCidrRanges and a Values of a list of the CIDR blocks for the VPC you are in.  Now you enter a Suricata compatible rule string.  Here is a template for a single domain suffix exception:  pass tls $VpcCidrRanges any -&gt; any any (msg:&quot;White List&quot;; flow:to_server; tls.sni; content:&quot;&lt;domain suffix&gt;&quot;; nocase; endswith; ssl_state:client_hello; sid:1001; rev:1;) pass http $VpcCidrRanges any -&gt; any any (msg:&quot;White List&quot;; content:&quot;&lt;domain suffix&gt;&quot;; http_host; endswith; sid:1002; rev:1;)   In the above template &lt;domain suffix&gt; can be a value such as github.com (which matches all domains ending in github.com) or .combine.io (which matches all subdomains of combine.io but NOT combine.io itself).  Pay attention to the sid. Each line must have a unique sid and they are evaluated in order of sid.  Click Next. Click Next. Click Create rule group.  ","version":"Next","tagName":"h3"},{"title":"Configure Override Rule Groupâ€‹","type":1,"pageTitle":"How To: Configure AirGap Layer","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-configure-airgap#configure-override-rule-group","content":" Once that rule group has been created copy the ARN value. Update the combine-vpc.yaml template and set the ARN value for the appropriate configuration parameter for the Firewall you are configuring:  CombineFirewallPrivateAuxiliaryRuleGroup CombineFirewallPublicAuxiliaryRuleGroup   ","version":"Next","tagName":"h3"},{"title":"Set Exemption Ruleâ€‹","type":1,"pageTitle":"How To: Configure AirGap Layer","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-configure-airgap#set-exemption-rule","content":" Exemptions can be added to the override rule group via the template described above. ","version":"Next","tagName":"h3"},{"title":"Minor Upgrade","type":0,"sectionRef":"#","url":"/Combine AWS/deploying-maintaining/minor-upgrade","content":"","keywords":"","version":"Next"},{"title":"How to Upgrade a Customer Accountâ€‹","type":1,"pageTitle":"Minor Upgrade","url":"/Combine AWS/deploying-maintaining/minor-upgrade#how-to-upgrade-a-customer-account","content":" Go into the combine-account-automation repo and checkout the current tag (e.g. git checkout bricks_v_3_12) Build and deploy the Combine components: for versions 3.13 and later: Perform a mvn clean package install in root directory of the combine-aws repository. This will build all Combine components and package them as needed.Perform this command to do the upgrade: On Mac/Linux: java -classpath &quot;combine-account-automation/lib/*:combine-account-automation/target/*&quot; com.sequoia.combine.accounts.CombineCommandExecutor migrate_to_3_dot_x --config-store-profile &lt;customer name from clients.json&gt; --bricks-release-version &lt;version number&gt; (Bricks Version numbers use the format: bricks_v_&lt;major&gt;_&lt;minor&gt;.)On Windows: java -classpath lib/*;target/* com.sequoia.combine.accounts.CombineCommandExecutor migrate_to_3_dot_x --config-store-profile &lt;customer name from clients.json&gt; --bricks-release-version &lt;version number&gt; (Bricks Version numbers use the format: bricks_v_&lt;major&gt;_&lt;minor&gt;.) for versions prior to 3.13: Perform a npm i &amp;&amp; npm run build in the combine-tap/tap-dashboard directory.Perform a mvn clean install on the following directories: combine-commonscombine-tap/tap-apicombine-endpoints Perform a mvn clean package install on combine-account-automationRun the following command: mvn exec:java -q &quot;-Dexec.args=update --config-store-profile {CUSTOMER_NAME_FROM_CLIENTS.JSON} --bricks-release-version bricks_v_&lt;major&gt;_&lt;minor&gt;&quot; Update our customer list: Customer Accounts Spreadsheet Select the customer you want to update (Altana is a good start) and check if they have any specific notes in the spreadsheet or in the Trello ticket (some have multiple VPCs, particular security groups, or other particular requirements) If the selected customer is in the clients.json file, you can run the following command: mvn exec:java -q &quot;-Dexec.args=update --config-store-profile {CUSTOMER_NAME_FROM_CLIENTS.JSON} --bricks-release-version bricks_v_3_12&quot; If not there, please add it to the file! But you can run the same command without the --config-store-profile flag and it will simply prompt you for all the relevant customer information, which you could retrieve manually from a couple places, but most quickly from the customers directory in the combine-aws-customers repo. You may have to still provide some basic inputs even given the proper flags as we are retooling the automation with almost every release. Once the CloudFormation templates have run with no errors and the instance refresh has been executed, you can now test that the update ran successfully. Here are a few sanity checks to run in each account that you upgrade: Log in to the TAP server and check the version number at the bottom of the page Keep in mind that some customers guard access to their TAP server and require additional configuration to access it, as in the case of Salesforce Ensure that the instances sitting in an auto scaling group (TAP and Endpoints) are stable, i.e. not spinning up new instances ","version":"Next","tagName":"h2"},{"title":"EKS 101","type":0,"sectionRef":"#","url":"/Combine AWS/deploying-maintaining/EKS/eks-101","content":"EKS 101 What is EKS? How do you support it? It's a lot of fun! Raw content from discussions with Matt: Notes from EKS Session with Matt: If a new customer wants/needs to use combine imds proxy (we only want to give it to them if the NEED to use IMDS, but itâ€™ll require a code change anyway, so they might not want to use it after all) pull it down from our public ECR, push back up to their own ECR from within CombineAction Item for each of us - look at the combine-proxy-imds repo, the docs are very nice learn how the customer is deploying EKS through terraform, or some other meansthereâ€™s configuration in terraform vs just EKS in the console more often than not customers use terraform Things to tell them EKS nodes need to be able to trust the Combine CA chain (like we do for normal VMs)A lot of things around IRSA (IAM Roles for Service Accounts) IRSA needs to have the emulated IAM ARNs, because they run on the nodes inside the Combine VPCaws-auth config map needs to be commercial only thing in the kubeconfig that gets emulated is the server endpoint urlEBS-CSI driver versions newer than 1.32 return a new CreateVolume topology name but we got around this by adding the user agent fix (Daniel will update this message with a link to that fix, it was with SF before Stephen left) Miscellaneous there are cases where customers will need an ingress subnet thereâ€™s a load balancer controller plugin that can set up load balancers as ingresses into the cluster IMDS Proxy improvements (IMDS PROXY DEPRECATED, DO NOT TALK ABOUT IT) some endpoints needs to be updated When a pod stands up in k8s, it doesnâ€™t have an IP. So when it makes its first call to the IMDS proxy, itâ€™s IP might not be in the list of approved IPs; the proxy might reject it. As part of that process, proxy will refresh its list of IPs, then if itâ€™s still not in there, then itâ€™ll reject it. The refresh might be fast enough that it â€˜beatsâ€™ the IP assigned to the pod in the case of the ebs-csi driver, it only tries twice before giving upi.e. there needs to be an improvement with how the refresh works, maybe set up an exponential backoff Some good resources IRSA - IAM roles for Service Accounts Article - https://medium.com/@ankit.wal/the-how-of-iam-roles-for-service-accounts-irsa-on-aws-eks-3d76badb89424 hour YouTube course on Vanilla Kubernetes - https://www.youtube.com/watch?v=X48VuDVv0doFull EKS course on Kubernetes (donâ€™t know of any right now)the kubernetes config parameters in the emulation.config in combine-awsthe kubernetes rewriters in combine-awscombine-imds-proxy repository (only for historical purposes) the cluster role in cisco has these permissions eks cluster policyeks cluster vpc controllerallow for KMS, required for EKS encryption there's no way to set EKS encryption at the customer for TSthe permissions on WLDEVELOPER do not support creating a KMS key grant, and the permissions on the KeyManager role do not let them list eks clusters deny for resource groups Users can create roles as long as they're prefixed by PROJECT_ and bounded by the Permissions Boundary PB-WLDEVELOPER, required by S or TS customer EVERY ROLE related to EKS has to be prefixed by PROJECT_ TO stand up a cluster create rolecreate clustercreate oidc provider not done by WLDEVELOPER, (Cisco uses CUSTOMERIT) or a Sequoia admin Repeat steps 1 &amp; 2 for the node groups, Create node group role(s)create node groups For VPC-only clusters: if the SG on the cluster does not include the cidr block of the node groups, the node groups will not be able to join the cluster. Does not apply to public clusters. OIDC provider is there for IRSA. service accounts can use the OIDC provider to assume a role in AWS once the cluster is created, you take the OIDC provider url and put in the trust policy trust policy for a PROJECT_aws-ebs-csi-driver-controller POD role: { &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ { &quot;Effect&quot;: &quot;Allow&quot;, &quot;Principal&quot;: { &quot;Federated&quot;: &quot;arn:aws:iam::663117128738:oidc-provider/oidc.eks.us-east-1.amazonaws.com/id/7435A97694DAE25C2079AC8D8B66D242&quot; oidc provider arn }, &quot;Action&quot;: &quot;sts:AssumeRoleWithWebIdentity&quot;, &quot;Condition&quot;: { &quot;StringEquals&quot;: { &quot;oidc.eks.us-east-1.amazonaws.com/id/7435A97694DAE25C2079AC8D8B66D242:sub&quot;: &quot;system:serviceaccount:kube-system:ebs-csi-controller-sa&quot;, needs to be the 'path' of the service account &quot;oidc.eks.us-east-1.amazonaws.com/id/7435A97694DAE25C2079AC8D8B66D242:aud&quot;: &quot;sts.amazonaws.com&quot; needs to match the sts endpoint on the oidc provider, } } }, { &quot;Sid&quot;: &quot;CombineInjectedServicePrincipal&quot;, &quot;Effect&quot;: &quot;Allow&quot;, &quot;Principal&quot;: { &quot;AWS&quot;: &quot;arn:aws:iam::663117128738:root&quot; }, &quot;Action&quot;: &quot;sts:AssumeRole&quot; } ] } Service Account sample: { &quot;kind&quot;: &quot;ServiceAccount&quot;, &quot;apiVersion&quot;: &quot;v1&quot;, &quot;metadata&quot;: { &quot;name&quot;: &quot;ebs-csi-controller-sa&quot;, &quot;namespace&quot;: &quot;kube-system&quot;, &quot;uid&quot;: &quot;8339dcbd-119b-4f5f-84ae-a1e7a8c24192&quot;, &quot;resourceVersion&quot;: &quot;179402&quot;, &quot;creationTimestamp&quot;: &quot;2024-09-18T21:56:08Z&quot;, &quot;labels&quot;: { &quot;app.kubernetes.io/component&quot;: &quot;csi-driver&quot;, &quot;app.kubernetes.io/instance&quot;: &quot;aws-ebs-csi-driver&quot;, &quot;app.kubernetes.io/managed-by&quot;: &quot;Helm&quot;, &quot;app.kubernetes.io/name&quot;: &quot;aws-ebs-csi-driver&quot;, &quot;app.kubernetes.io/version&quot;: &quot;1.33.0&quot;, &quot;helm.sh/chart&quot;: &quot;aws-ebs-csi-driver-2.33.0&quot; }, &quot;annotations&quot;: { &quot;eks.amazonaws.com/audience&quot;: &quot;sts.amazonaws.com&quot;, &quot;eks.amazonaws.com/role-arn&quot;: &quot;arn:aws-iso:iam::663117128738:role/PROJECT_aws-ebs-csi-driver-controller&quot;, &quot;meta.helm.sh/release-name&quot;: &quot;aws-ebs-csi-driver&quot;, &quot;meta.helm.sh/release-namespace&quot;: &quot;kube-system&quot; } }, &quot;automountServiceAccountToken&quot;: true } the annotations matter, the audience has to match the sts endpoint from above, the role arn needs to match the role the pod will get created with an sts token that has the role here's a pod that's using the irsa the serviceAccountToken listed in the voume needs to match the audience for the STS account token the aws-iam-token volume is the one to look at this automount is a flag in most helm charts https://github.com/kubernetes-sigs/aws-ebs-csi-driver/blob/master/charts/aws-ebs-csi-driver/values.yaml#L397 The terraform in combine-terraform does this; release sparingly to customers, as it is very complex and requires helm and other stuff.","keywords":"","version":"Next"},{"title":"Full Deploy Process","type":0,"sectionRef":"#","url":"/Combine AWS/deploying-maintaining/full-deploy","content":"","keywords":"","version":"Next"},{"title":"When Combine onboards a new customer, these are the steps you need to follow to set up their AWS Account:â€‹","type":1,"pageTitle":"Full Deploy Process","url":"/Combine AWS/deploying-maintaining/full-deploy#when-combine-onboards-a-new-customer-these-are-the-steps-you-need-to-follow-to-set-up-their-aws-account","content":" Email customer the combine-provisioning.yaml to run in their account.  CloudFormation template is located at combine-account-automation/src/main/resources/com/sequoia/combine/templates/provisioning/combine-provisioning.yamlCustomer needs to provide the Provisioning Role ARN found on the Outputs tab in CloudFormation after running this yaml (see next step for full details). Note: This is often done by Brian, who emails us the Role ARN.  The customer needs to follow these steps exactly:  Navigate to &quot;CloudFormation&quot; on AWS (https://us-east-1.console.aws.amazon.com/cloudformation/)Find &quot;Stacks&quot; and click &quot;Create Stack&quot; &gt; Select &quot;With new resources&quot;For &quot;Prerequisite - Prepare template&quot; select &quot;Choose an existing template&quot;For &quot;Specify Template&quot; select &quot;Upload a template file&quot;Choose the combine-provisioning.yaml file referenced in the first stepFor Step 2: Specify Stack Details a name must be provided for the stackClick &quot;Next&quot;For &quot;Configure stack options&quot; leave all settings as they are up to &quot;Capabilities&quot;Under &quot;Capabilities&quot; click the checkbox next to &quot;I acknowledge that AWS CloudFormation might create IAM resources with custom names.&quot;Click &quot;Next&quot;For &quot;Review and create&quot; leave all settings as they are and click &quot;Submit&quot;The browser should proceed to a menu under Cloudformation &gt; Stacks &gt; /&lt;StackName/&gt;The tab &quot;Events - updated&quot; will be selectedThe current status should show as CREATE_IN_PROGRESSAfter a couple minutes a number of events will be logged and the status should change to CREATE_COMPLETEWhen provisioning is complete the customer needs to find the Outputs tab on the same page and provide us with the Provisioning Role ARN value  Pull the latest tag for the combine-aws repository. (e.g., git tag -l then git checkout &lt;latest_tag&gt;) Create a clients.json (located at combine-account-automation/clients.json) entry for the customer using the AWS Account Number and Role ARN they provided in Step  Here is an example json entry for addition to clients.json:   &quot;customer&quot;: { &quot;region&quot;: &quot;us-east-1&quot;, &quot;masterRegion&quot;: &quot;us-east-1&quot;, &quot;shardId&quot;: &quot;&quot;, &quot;clientAccountId&quot;: &quot;&lt;Customer Account Number&gt;&quot;, &quot;clientRoleArn&quot;: &quot;arn:aws:iam::&lt;Customer Account Number&gt;:role/Combine-Provisioning-Role&quot;, &quot;bucketEncryptionKey&quot;: &quot;&quot;, &quot;hasUserManagementAccount&quot;: &quot;false&quot;, &quot;followerType&quot;: &quot;None&quot;, &quot;buildTS&quot;: &quot;true&quot;, &quot;buildS&quot;: &quot;true&quot;, &quot;buildGovCloud&quot;: &quot;false&quot;, &quot;certificateName&quot;: &quot;Customer&quot;, &quot;templateParameters&quot;: { &quot;combine.yaml&quot;: { }, &quot;combine-policy.yaml&quot;: { }, &quot;combine-vpc.yaml&quot;: { } } }   Note: You will need to add this change to the master branch since you are working in a tag.  Build and deploy the Combine components: for versions 3.13 and later: Perform a mvn clean package install in root directory of the combine-aws repository. This will build all Combine components and package them as needed.Perform the actual deploy: On Mac/Linux: java -classpath &quot;combine-account-automation/lib/*:combine-account-automation/target/*&quot; com.sequoia.combine.accounts.CombineCommandExecutor full --config-store-profile &lt;customer name from clients.json&gt; --bricks-release-version &lt;version number&gt; (Bricks Version numbers use the format: bricks_v_&lt;major&gt;_&lt;minor&gt;.)On Windows: java -classpath lib/*;target/* com.sequoia.combine.accounts.CombineCommandExecutor full --config-store-profile &lt;customer name from clients.json&gt; --bricks-release-version &lt;version number&gt; (Bricks Version numbers use the format: bricks_v_&lt;major&gt;_&lt;minor&gt;.) for versions prior to 3.13: Perform a npm i &amp;&amp; npm run build in the combine-tap/tap-dashboard directory.Perform a mvn clean install on the following directories: combine-commonscombine-tap/tap-apicombine-endpoints Perform a mvn clean package install on combine-account-automationRun the following command: mvn exec:java -q &quot;-Dexec.args=full --config-store-profile {CUSTOMER_NAME_FROM_CLIENTS.JSON} --bricks-release-version bricks_v_3_12&quot; If the tool runs with no errors, you should be able to log into their AWS account and see Combine resources being created. After the tool completes navigate to the TAP Dashboard using the admin certificates downloaded from the link provided (or you can retrieve the admin.zip from the combine-app-storage-&lt;account number&gt;-public bucket) and add any additional users the customer requires. Once they receive their credentials, they often need help authenticating - this often happens live during the onboarding session. Update our customer list: Customer Accounts Spreadsheet You also need to add an entry for the customer in the combine-aws-customers/customers repo. This includes the certs, passwords.txt file, tap.txt file, README.txt, etc. tap.txt should contain the url of the Load Balancer that points to the customer's TAP Autoscaling group. ","version":"Next","tagName":"h2"},{"title":"Other Commands","type":0,"sectionRef":"#","url":"/Combine AWS/deploying-maintaining/other-commands","content":"","keywords":"","version":"Next"},{"title":"List all Commands - CombineCommandListâ€‹","type":1,"pageTitle":"Other Commands","url":"/Combine AWS/deploying-maintaining/other-commands#list-all-commands---combinecommandlist","content":" The Combine automation tool can display all existing commands; you can run it like this:  On Mac/Linux: java -classpath &quot;combine-account-automation/lib/*:combine-account-automation/target/*&quot; com.sequoia.combine.accounts.CombineCommandListOn Windows: java -classpath combine-account-automation/lib/*;combine-account-automation/target/* com.sequoia.combine.accounts.CombineCommandList  The output will look something like:  Command Description create_admin_user Creates Admin user in TAP, will fail if there is no user management account. destroy TBD create_greybox_user TBD build_certificate_authority Builds CA and stores in Amazon Certificates Manager. full_no_vpc TBD ssh_key_repair TBD stage TBD full TBD certificates_repair TBD certificates_rebuild_tap TBD certificates_rebuild_endpoints TBD certificates_rebuild_tap_custom_dns TBD update Updates the customer's devops bucket, does NOT do instance refresh build_greybox TBD migrate_to_3_dot_x Generic Upgrade, not including follower accounts and shards. migrate_to_3_dot_12 Upgrade to 3.12.X; todos are to parameterize the stack names. migrate_to_3_dot_13 Upgrade to 3.13. Does NOT do instance refresh.   ","version":"Next","tagName":"h2"},{"title":"Rebuild TAP Certificates - certificates_rebuild_tapâ€‹","type":1,"pageTitle":"Other Commands","url":"/Combine AWS/deploying-maintaining/other-commands#rebuild-tap-certificates---certificates_rebuild_tap","content":" Both TAP certificates, internal and external (which are for accessing TAP external and internal to the Combine VPC) will expire at some point. Usually this is every two years.  For example:    The cert date is invalid, as you can see from the error (ERR_CERT_DATE_INVALID). If we examine the cert we'll confirm this:  (today's date is 1/6/2025)  If the certs expire, users will be presented with a warning in the browser that the certificate served from the TAP server is unsafe due to the expiration.  To do this, run the certificates_rebuild_tap command, remembering to build the automation tool jar, as with all other Automation Tool Commands.  A sample invocation: mvn exec:java -q &quot;-Dexec.args=certificates_rebuild_tap --config-store-profile customerNameFromClientsDotJson --bricks-release-version bricks_v_3_12_3&quot;  The command will spit out some logs, ending with this one:  TAP Certificates Updated in S3.   You can confirm this by navigating to the combine-devops bucket in the customer's account and checking the tap cert updated dates (certs live in the /certificates directory):    The new certificates have overwritten the outdated ones.  From here, you need to perform an instance refresh on the TAP autoscaling group, which will run the launch template on the new TAP instances and pull down the new certificates. ","version":"Next","tagName":"h2"},{"title":"How To: Deploy a Hotfix Release","type":0,"sectionRef":"#","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-hotfix","content":"How To: Deploy a Hotfix Release (more detail coming!) Branching off of the last stable tag from master is what we want to do when we're doing a very precise bug fix. If so, the version will have a fourth quadrant, i.e. if you were fixing a bug on 3.13.1, you'd move to 3.13.1.1 ideally, instead of 3.13.2. In rare cases, i.e. for Salesforce, we will have to branch from a tag prior to the last stable version. Here's the process: branch from last stable tag on master, suffix with _branch or _hotfixmake change, be sure to add release note in release-notes.html (if you can do it one commit that'd be easiest)update versions on separate commit (see update_bricks_version.sh in /combine-automation-tool/scripts, copy it from master if it's not there), add 4th quadrant release numbertest change, locally if possible TODO add guide for testing rewriters, as these are the most common case deploy to customerupon successful deploy (i..e hear back from customer that it works): push the first commit (i.e. the code change + release note change) into master via squash commityou can also cherrypick, just as long as the change and the release notes are merged into master tag your new tag from your hotfix branch, with git tag bricks_v_3_13_1_1 in this casepush the tag, i.e. git push origin tag bricks_v_3_13_1_1 master is merged into dev regularly.","keywords":"","version":"Next"},{"title":"Architecture","type":0,"sectionRef":"#","url":"/Combine AWS/developing/architecture","content":"","keywords":"","version":"Next"},{"title":"A detailed walkthrough of the Combine AWS Architectureâ€‹","type":1,"pageTitle":"Architecture","url":"/Combine AWS/developing/architecture#a-detailed-walkthrough-of-the-combine-aws-architecture","content":" A diagram:  TODOs:  add information about Combine consisting of cloudformation + assetsadd content for each project - combine-commons, combine-tap, combine-endpoints and combine-account-automation  ","version":"Next","tagName":"h3"},{"title":"Instance Refreshâ€‹","type":1,"pageTitle":"Architecture","url":"/Combine AWS/developing/architecture#instance-refresh","content":" TODO add instructions on how to do an instance refresh ","version":"Next","tagName":"h3"},{"title":"How To: Update Combine Service Parity Definitions","type":0,"sectionRef":"#","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-update-service-parity","content":"","keywords":"","version":"Next"},{"title":"Policy Updatesâ€‹","type":1,"pageTitle":"How To: Update Combine Service Parity Definitions","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-update-service-parity#policy-updates","content":" ","version":"Next","tagName":"h2"},{"title":"API Filter Updatesâ€‹","type":1,"pageTitle":"How To: Update Combine Service Parity Definitions","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-update-service-parity#api-filter-updates","content":" ","version":"Next","tagName":"h2"},{"title":"Configuration Updatesâ€‹","type":1,"pageTitle":"How To: Update Combine Service Parity Definitions","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-update-service-parity#configuration-updates","content":"","version":"Next","tagName":"h2"},{"title":"Support Duties","type":0,"sectionRef":"#","url":"/Combine AWS/deploying-maintaining/support-duties","content":"Support Duties Support goes from Tuesday - Tuesday. If it's your week on Support: keep track of thena - move requests from 'Waiting on Us' to 'Waiting on Customer', close requests, follow up where needed.ask for help if support swarmsduring downtime, update documentation, see the repo's open issues on the Project Board's Ready Column.","keywords":"","version":"Next"},{"title":"How To: Tail a Customer Firewall to Check for Dropped Traffic","type":0,"sectionRef":"#","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-tail-customer-firewall","content":"","keywords":"","version":"Next"},{"title":"Stepsâ€‹","type":1,"pageTitle":"How To: Tail a Customer Firewall to Check for Dropped Traffic","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-tail-customer-firewall#steps","content":" Locate the Customer Account Access the customer's account. Navigate to CloudWatch In AWS, search for &quot;CloudWatch&quot;. Access Log Groups In the left pane, expand &quot;Logs&quot; and click on &quot;Log Groups&quot;. Find the Customer Log Group In the Log Groups window, locate and click on the log group titled: Combine_[CUSTOMER]_Log_Group_Firewall Search Log Streams On the next page, ensure the &quot;Log Streams&quot; tab is open at the bottom.Find the &quot;Search all log streams&quot; button on the right and click it. Enable Real-Time View For real-time logs, click &quot;Start Tailing&quot;. Highlight Specific Terms Use the &quot;Highlight Term&quot; field to highlight specific strings of interest. Example: To highlight the IP address 1.2.3.4, type 1.2.3.4 into the &quot;Highlight Term&quot; field. Identify Dropped Traffic Look for entries containing the terms: &quot;reject&quot;&quot;block&quot;  ","version":"Next","tagName":"h2"},{"title":"Filtering firewall entries for blocked traffic:â€‹","type":1,"pageTitle":"How To: Tail a Customer Firewall to Check for Dropped Traffic","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-tail-customer-firewall#filtering-firewall-entries-for-blocked-traffic","content":" The following filter should work to find sets of IP addresses that are being blocked:  { ($.event.dest_ip = &quot;1.2.3.4&quot; || $.event.dest_ip = &quot;1.2.3.4&quot; || $.event.dest_ip = &quot;1.2.3.4&quot;) &amp;&amp; $.event.alert.action = &quot;blocked&quot; }  ","version":"Next","tagName":"h2"},{"title":"How To: Run Java Through Socks Proxy with proxychains","type":0,"sectionRef":"#","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-run-java-through-proxychains","content":"","keywords":"","version":"Next"},{"title":"Steps to Get the cap-credentials-provider Java Application to Work with ProxyChainsâ€‹","type":1,"pageTitle":"How To: Run Java Through Socks Proxy with proxychains","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-run-java-through-proxychains#steps-to-get-the-cap-credentials-provider-java-application-to-work-with-proxychains","content":" This guide details all the required steps to configure ProxyChains to route Java application (cap-credentials-provider) traffic through a SOCKS5 proxy. A SOCKS proxy can be used to provide a different exit point for traffic that is originating from the application, almost like a lightweight VPN tunnel. When the application is run with proxychains all of its traffic is captured and redirected through the SSH based SOCKS proxy (established later in this example). The traffic then exits out of the end of the SSH tunnel and all replies are routed back through the SSH tunnel to the originating application.  This guide currently works ONLY with Linux based operating systems.â€‹  At this time it appears that Mac OS does not allow network traffic to be redirected from Java through proxychains / SOCKS and the issue will need to be resolved in order to utilize the functionality. The primary suspect is SIP (System Integrity Protection)  Should this problem be resolved it will allow for local development and debugging of Java applications while they are effectively executed within the VPC.    ","version":"Next","tagName":"h3"},{"title":"1. Install Proxychainsâ€‹","type":1,"pageTitle":"How To: Run Java Through Socks Proxy with proxychains","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-run-java-through-proxychains#1-install-proxychains","content":" Ensure the following are installed on your system:  sudo apt install proxychains4     ","version":"Next","tagName":"h2"},{"title":"2. Configure ProxyChainsâ€‹","type":1,"pageTitle":"How To: Run Java Through Socks Proxy with proxychains","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-run-java-through-proxychains#2-configure-proxychains","content":" Modify the configuration file /etc/proxychains.conf:  sudo nano /etc/proxychains.conf   ","version":"Next","tagName":"h2"},{"title":"Required Changes:â€‹","type":1,"pageTitle":"How To: Run Java Through Socks Proxy with proxychains","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-run-java-through-proxychains#required-changes","content":" Many of these options are already present within the configuration file. Ensure that they are not commented out.  Set the proxy mode to strict: strict_chain Enable DNS resolution via proxy: proxy_dns Add your SOCKS5 proxy at the end of the file: [ProxyList] socks5 127.0.0.1 9050 (Replace 127.0.0.1 9050 with the actual proxy settings if different.)  Save and exit (Ctrl + X, then Y, then Enter).    ","version":"Next","tagName":"h3"},{"title":"3. Ensure the Proxy is Runningâ€‹","type":1,"pageTitle":"How To: Run Java Through Socks Proxy with proxychains","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-run-java-through-proxychains#3-ensure-the-proxy-is-running","content":" If using an SSH-based SOCKS5 proxy, start it with:  ssh -D 9050 -i /path/to/key.pem -N -f user@proxy-server-ip   Confirm itâ€™s running:  ss -pantu | grep 1080     ","version":"Next","tagName":"h2"},{"title":"5. Run Java Application with ProxyChainsâ€‹","type":1,"pageTitle":"How To: Run Java Through Socks Proxy with proxychains","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-run-java-through-proxychains#5-run-java-application-with-proxychains","content":" Run the built Java application using proxychains:  proxychains4 java -jar target/cap-credentials-provider.jar   (Ensure the correct JAR file name is used.)  Successful execution should yield output similar to the following:  [proxychains] config file found: /etc/proxychains.conf [proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4 [proxychains] DLL init: proxychains-ng 4.16 ... [proxychains] Strict chain ... 127.0.0.1:9050 ... website.target.something.mil:443 ... OK     ","version":"Next","tagName":"h2"},{"title":"6. Debugging & Testingâ€‹","type":1,"pageTitle":"How To: Run Java Through Socks Proxy with proxychains","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-run-java-through-proxychains#6-debugging--testing","content":" Check network traffic via proxy: proxychains4 curl ifconfig.me If it returns the proxyâ€™s IP, ProxyChains is working. Run Java with debugging logs: proxychains4 java -Djava.net.debug=all -jar target/cap-credentials-provider.jar [arguments] This provides detailed networking logs.    ","version":"Next","tagName":"h2"},{"title":"7. Verify DNS Resolution Over Proxyâ€‹","type":1,"pageTitle":"How To: Run Java Through Socks Proxy with proxychains","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-run-java-through-proxychains#7-verify-dns-resolution-over-proxy","content":" Since Java applications may directly resolve DNS, test if proxychains is handling DNS correctly:  proxychains4 dig +tcp website.target.something.mil     ","version":"Next","tagName":"h2"},{"title":"Final Checklistâ€‹","type":1,"pageTitle":"How To: Run Java Through Socks Proxy with proxychains","url":"/Combine AWS/deploying-maintaining/how-tos/how-to-run-java-through-proxychains#final-checklist","content":" âœ… Install proxychains4 (sudo apt install proxychains4) âœ… Configure ProxyChains (/etc/proxychains.conf). âœ… Ensure the SOCKS5 proxy is running (ssh -D 9050). âœ… Run Java through ProxyChains (proxychains4 java -jar ...). âœ… Verify traffic &amp; DNS resolution (proxychains4 dig +tcp ...).    This setup will ensure all network requests from the Java application are routed through the SOCKS5 proxy via ProxyChains. ","version":"Next","tagName":"h3"},{"title":"All those Cloudformation Parameters","type":0,"sectionRef":"#","url":"/Combine AWS/developing/all-those-cloudformation-parameters","content":"All those Cloudformation Parameters","keywords":"","version":"Next"},{"title":"Feature: PKI Certificates: CSR Signing API","type":0,"sectionRef":"#","url":"/Combine AWS/features/feature-certificates-csr-signing-api","content":"Feature: PKI Certificates: CSR Signing API Combine provides an API for Signing CSR Requests. This API is not an emulation and is not available on the high side. It solely exists to facilitate customers who want to use a CSR but also do not want to manually upload each CSR to Combine. To enable this API set the following configuration value to true: combine.tap.api.certificates.signCustomCSR.enable Once enabled, this API Endpoint is: &lt;tap server&gt;/tap/api/v1/admin/certificate/custom It accepts a CSR as the body of a request and returns the signed Certificate as PEM encoded text. Here is an example command that is made from inside a Combine VPC: curl -X POST -H &quot;X-Requested-By: Combine&quot; --data-binary @csr.pem --cacert ca-chain.cert.pem --cert &lt;username&gt;.cert.pem:&lt;password&gt; --key &lt;username&gt;.key.pem &quot;https://cap.cia.ic.gov/tap/api/v1/admin/certificate/custom&quot; NOTE: You need to provide a CSRF X-Requested-By header.","keywords":"","version":"Next"},{"title":"Connecting to the TAP Server via SSH","type":0,"sectionRef":"#","url":"/Combine AWS/developing/combine-101/get-into-tap","content":"Connecting to the TAP Server via SSH Start by creating an SSH connection in to the bastion server See 'get-into-bastion' if a connection to the bastion server has not yet been established Locate the CombineRestricted.pem key Return to the S3 bucket that contained the original Combine.pem key used to connect to the bastion host. See getting-in-to-bastion.mdSearch within this bucket or other related buckets for the CombineRestricted.pem key SCP the CombineRestricted.pem key on to the bastion host Transfer the restricted key on to the bastion using SCP Open a second terminal window on the local system and use the following syntax: scp -i /path/to/key/Combine.pem /local/path/to/CombineRestricted.pem ec2-user@ec2-1-2-3-4.compute-1.amazonaws.com:/home/ec2-user Note that the syntax is as follows: scp -i &lt;bastion_key.pem&gt; &lt;local_copy_of_CombineRestricted.pem&gt; &lt;remote_username&gt;@&lt;remote_system_dns_name&gt;:&lt;remote_filepath_for_upload&gt; Connecting to the TAP server dashboard via web browser Access the EC2 dasbhboard in AWSScroll down to the &quot;Load Balancing&quot; menu on the left side of the dashboard and select &quot;Load Balancers&quot;If desired, add a filter to the list that uses the name of the target shardFind the &lt;Shard&gt;-Combine-T-E load balancer (this stands for Combine-Tap-External) and click on itIn the details window find the DNS name field - it should be formatted like so: ShardName-Combine-T-E-4787a73e2dc82fc5.elb.us-east-1.amazonaws.com Use that address in a web browser to connect to the public web front end of the TAP server dashboard. Be sure to add the Combine certificate authority to the operating system or browser CAs prior to connectingSee Set up the CA on the local system in the &quot;Building a Developer Shard&quot; article. Add the user's .pem file to the browser for authentication (add to this)","keywords":"","version":"Next"},{"title":"Combine 101","type":0,"sectionRef":"#","url":"/Combine AWS/developing/combine-101","content":"Combine 101 TODO make one page for each of these top-level bullets, move combine 101 to its own directory Get into bastion VM inside Combine network find bastion/test server/jumpbox from Ec2 console search 'ec2' in the aws console inside our combine accountfind a bastion instance corresponding to the namespace/shard of the Combine deployment you're trying to get into. Note the public ip and keypair name.the keypair is not downloadable from the ec2 console, but lives in the s3 bucket that corresponds to the Combine shard. To find the bucket, click into s3 on the console and: find the devops bucket corresponding to the shardinside the /keys directory of the bucket, there'll be a Combine.pem (which is a bug, it should be named the same as the keypair name in the ec2 instance details - but we'll pass over that bug for now ðŸ˜Š)download it! you'll have to chmod +x Combine.pem, or whatever the windows equivalent to chmod +x is. It gives you execute permissions on the key file.run this ssh command, or whatever windows equivalent it is, gathering the info you've gotten so far, namely the public ip and the key of the bastion:ssh -i Combine.pem ec2-user@&lt;public-ip-of-bastion&gt;hopefully it works!when you're in, you can run aws sts get-caller-identity to see if you get back an iso ARN (an ARN that has the aws-iso in one of the quadrants) Walk through EndpointServletImplementationAWS in combine-aws look at recent bricks version tag changes to see how releases work get to TAP dashboard get credential emailuse readme, install certs","keywords":"","version":"Next"},{"title":"The Combine Automation Tool","type":0,"sectionRef":"#","url":"/Combine AWS/developing/combine-101/automation-tool","content":"The Combine Automation Tool TODO write description of the Automation tool, how we use it, what a CombineCommand is, etc","keywords":"","version":"Next"},{"title":"Endpoints 101","type":0,"sectionRef":"#","url":"/Combine AWS/developing/endpoints-101","content":"Endpoints 101 Sparse checklist to get feet wet/troubleshooting: Locate keys for ssh'ing into (EC2) bastion look in AWS console to find which keypair is used in bastion ec2 instance get into Combine test server from bastion via keypair for that ec2 instance install ca chain on test server (see tap documentation for instructions on how to do this, i.e. update-ca-trust)aws sts get-caller-identity to diagnose whether you're actually 'in' Combine, should get iso valueslook in cloudwatch for the log corresponding to the aws cli call you just made Starting point for code: EndpointServletImplementationAWS.java needs to be surfaced to new team members early! TODO add content for: more detail on how the translation worksbe very clearmore screenshots Here's the inheritance bulleted structure for some of the more important classes in the endpoints code: Inheritance Structure ApiHandler ApiFilter AwsApiFilter ApiFilterApiGatewayV1AuthorizersApiFilterApiGatewayV1RestAPIApiFilterApiGatewayV1SDKTypeApiFilterAwsApiCallLogger ApiFilterAwsApiCallLoggerAMIApiFilterAwsApiCallLoggerActionApiFilterAwsApiCallLoggerArtifactECRApiFilterAwsApiCallLoggerArtifactS3 (Many other subclasses...) ApiRewriter ApiRequestRewriter AwsApiRewriterRequest ApiRequestRewriterAllTagsArnApiRequestRewriterApiGatewayArn(Many other subclasses...) AzureApiRewriterRequest ApiRequestRewriterKeyVaultUriApiRequestRewriterOAuthTokenScope ApiResponseRewriter AwsApiRewriterResponse ApiResponseRewriterApiGatewayArnApiResponseRewriterAppConfigArn(Many other subclasses...) AzureApiRewriterResponse ApiResponseRewriterKeyVaultUriApiResponseRewriterLocationHeaderApiResponseRewriterOperationHeader EndpointServletImplementation EndpointServletImplementationAWSEndpointServletImplementationAzureEndpointServletImplementationOracle LogAggregate TransactionLog TransactionLogAWS WebSocketTransactionLog Transaction TransactionAWS","keywords":"","version":"Next"},{"title":"walk-through-endpointservletimplementation","type":0,"sectionRef":"#","url":"/Combine AWS/developing/combine-101/walk-through-endpointservletimplementation","content":"walk-through-endpointservletimplementation","keywords":"","version":"Next"},{"title":"Feature: VPC Wrapping","type":0,"sectionRef":"#","url":"/Combine AWS/features/feature-vpc-wrapping","content":"","keywords":"","version":"Next"},{"title":"Configuration Parametersâ€‹","type":1,"pageTitle":"Feature: VPC Wrapping","url":"/Combine AWS/features/feature-vpc-wrapping#configuration-parameters","content":" ","version":"Next","tagName":"h2"},{"title":"Considerationsâ€‹","type":1,"pageTitle":"Feature: VPC Wrapping","url":"/Combine AWS/features/feature-vpc-wrapping#considerations","content":"","version":"Next","tagName":"h2"},{"title":"Tag a Release","type":0,"sectionRef":"#","url":"/Combine AWS/developing/tag-a-release","content":"","keywords":"","version":"Next"},{"title":"How to Build and Tag a Releaseâ€‹","type":1,"pageTitle":"Tag a Release","url":"/Combine AWS/developing/tag-a-release#how-to-build-and-tag-a-release","content":" Go into the combine-account-automation repo and checkout the master branch. Perform a git pull.  If tagging from a non-master branch, you'll have to do some extra work detailed below.  Run update_versions.sh &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt; in combine-account-automation/scripts  If tagging from a non-master branch, you can grab this script from master and run it - it'll work even in prior versions.  Run mvn clean install in the combine-aws repo root directory to ensure a clean build.  If tagging from a non-master branch: Run the relevant mvn commands on the following directories: combine-commons - mvn clean installcombine-endpoints - mvn clean packagecombine-tap - Use the build.txt. filecombine-tomcat - mvn clean package Place all .war files (endpoints, tap, tomcat jar - found in each project dir/target) in their corresponding dirs in the following root directory: combine-account-automation/src/main/resources/com/sequoia/combine/servers Example commands: mv combine-tap/tap-api/target/tap-api-3.12.1.war combine-account-automation/src/main/resources/com/sequoia/combine/servers/tapmv combine-endpoints/target/endpoints-3.12.1.war combine-account-automation/src/main/resources/com/sequoia/combine/servers/endpointsmv combine-tomcat/target/combine-tomcat-1.2.jar combine-account-automation/src/main/resources/com/sequoia/combine/servers/tomcat  Tag the branch: git add -Agit commit -m &quot;Updated release number.&quot;git pushgit tag &lt;bricks version&gt;git push origin tag &lt;bricks version&gt; Checkout dev and merge master into it and resolve. those. conflicts. ","version":"Next","tagName":"h3"},{"title":"Feature: PKI Certificates: OCSP Support","type":0,"sectionRef":"#","url":"/Combine AWS/features/feature-certificates-ocsp-support","content":"","keywords":"","version":"Next"},{"title":"Configurationâ€‹","type":1,"pageTitle":"Feature: PKI Certificates: OCSP Support","url":"/Combine AWS/features/feature-certificates-ocsp-support#configuration","content":" To enable OCSP you set the following configuration value to true:  combine.tap.certificates.ocsp  If this is set then any User or Server/NPE certificates issued by TAP will include an AIA block listing the following OCSP Endpoints:  ocsp.c2s.ic.govocsp.sc2s.sgov.gov  There are several additional configuration parameters:  combine.tap.ocsp.responder.signerCertificate.cache.duration which is how long in milliseconds to cache the Signer Certificate before refreshing it from S3. Defaults to 15 minutes.  combine.tap.ocsp.responder.nextUpdate.duration which is how long Combine advertises before the next update to OCSP. Defaults to 24 hours.  ","version":"Next","tagName":"h2"},{"title":"Certificate Revocationâ€‹","type":1,"pageTitle":"Feature: PKI Certificates: OCSP Support","url":"/Combine AWS/features/feature-certificates-ocsp-support#certificate-revocation","content":" Combine supports Certificate Revocation by setting a configuration value for each revoked certificate.  combine.tap.certificates.revocation.certificate.&lt;serial number&gt;.date which is the epoch time in milliseconds at which the certificate was revoked.  The TAP Dashboard will respect certificate revocation during authentication.  ","version":"Next","tagName":"h2"},{"title":"Notesâ€‹","type":1,"pageTitle":"Feature: PKI Certificates: OCSP Support","url":"/Combine AWS/features/feature-certificates-ocsp-support#notes","content":" WARNING: Browsers are very very aggressive about enforcing OCSP for certificates and will not validate a certificate if they cannot reach at least one of the advertised OCSP Responder Endpoints. This means that if you use an OCSP Signed Certificate for a server, and try to reach that server with a client browser, the browser must have access to the OCSP Endpoint through Private DNS for your client. ","version":"Next","tagName":"h2"},{"title":"Building a Developer Shard","type":0,"sectionRef":"#","url":"/Combine AWS/developing/combine-101/build-dev-shard","content":"","keywords":"","version":"Next"},{"title":"Prerequisitesâ€‹","type":1,"pageTitle":"Building a Developer Shard","url":"/Combine AWS/developing/combine-101/build-dev-shard#prerequisites","content":" mavenjava openjdk 17Bouncy Castle encryption library bcprov-jdk18on-1.78.1.jar in combine-aws/account-automation/lib/  ","version":"Next","tagName":"h2"},{"title":"1. Pull the latest release tag for deployment to the dev shard from the git repositoryâ€‹","type":1,"pageTitle":"Building a Developer Shard","url":"/Combine AWS/developing/combine-101/build-dev-shard#1-pull-the-latest-release-tag-for-deployment-to-the-dev-shard-from-the-git-repository","content":" This can be accomplished with git tag -l then git checkout &lt;latest_tag&gt; Use the following sytax to list the create date of each tag: git for-each-ref --format='%(refname:short) %(creatordate)' refs/tags Take note of this value as it will be needed when deploying the installation to AWS The following bash one-liner will check for the latest tag and then check it out automatically: git for-each-ref --sort=-creatordate --format='%(refname:short)' refs/tags | head -n 1 | xargs git checkout   ","version":"Next","tagName":"h3"},{"title":"2. Create a clients.json entry for your shardâ€‹","type":1,"pageTitle":"Building a Developer Shard","url":"/Combine AWS/developing/combine-101/build-dev-shard#2-create-a-clientsjson-entry-for-your-shard","content":" clients.json is located at combine-aws/combine-account-automation/clients.json Here is an example json entry for addition to clients.json: &quot;example&quot;: { &quot;region&quot;: &quot;us-east-1&quot;, &quot;masterRegion&quot;: &quot;us-east-1&quot;, &quot;shardId&quot;: &quot;Example&quot;, &quot;clientAccountId&quot;: &quot;663117128738&quot;, &quot;clientRoleArn&quot;: &quot;arn:aws:iam::663117128738:role/Combine-Provisioning-Role&quot;, &quot;bucketEncryptionKey&quot;: &quot;&quot;, &quot;hasUserManagementAccount&quot;: &quot;false&quot;, &quot;followerType&quot;: &quot;None&quot;, &quot;buildTS&quot;: &quot;true&quot;, &quot;buildS&quot;: &quot;true&quot;, &quot;buildGovCloud&quot;: &quot;false&quot;, &quot;certificateName&quot;: &quot;Example&quot;, &quot;templateParameters&quot;: { &quot;combine.yaml&quot;: { }, &quot;combine-policy.yaml&quot;: { }, &quot;combine-vpc.yaml&quot;: { } } } Note that &quot;Combine-Example&quot; will be the final stack name for the above configuration. The shardId field will have the string Combine- prepended to it upon creation. Remember to add a leading or trailing comma to the JSON.  ","version":"Next","tagName":"h3"},{"title":"3. Build and deploy the Combine components:â€‹","type":1,"pageTitle":"Building a Developer Shard","url":"/Combine AWS/developing/combine-101/build-dev-shard#3-build-and-deploy-the-combine-components","content":" For versions 3.13 and later: Perform a mvn clean package install in the combine-aws directory. This will build all Combine components and package them as needed.Troubleshooting If installation doesn't work from the combine-aws directory then try running the mvn command in combine-aws/combine-account/automationFor a Could not resolve dependencies error use the following grep format to identify mismatched release values in pom.xml files throughout the Combine directories: cd in to the combine-aws directory and run the following grep command:grep -rn . -e '&lt;version&gt;3\\.13.*'Replace the major and minor version numbers with the release in use for the deployment.Note that 3.13 is the first portion of the release version and any minor values will be found in matching nodes.Modify any value fields in parent nodes in pom.xml files that do not match the selected tag / release number. Perform the actual deploy: On Mac/Linux:cd combine-account-automation/ java -classpath &quot;lib/*:target/*&quot; com.sequoia.combine.accounts.CombineCommandExecutor full --config-store-profile &lt;customer name from clients.json&gt; --bricks-release-version &lt;version number&gt; Example command: java -classpath &quot;combine-account-automation/lib/*:combine-account-automation/target/*&quot; com.sequoia.combine.accounts.CombineCommandExecutor full --config-store-profile combineExample --bricks-release-version bricks_v_3_13_1_1 On Windows: java -classpath lib/*;target/* com.sequoia.combine.accounts.CombineCommandExecutor full --config-store-profile &lt;customer name from clients.json&gt; --bricks-release-version &lt;version number&gt; Bricks Version numbers use the format: bricks_v_&lt;major&gt;_&lt;minor&gt;. Troubleshooting If the error Configuration Profile [ProfileName] not found in Configuration Store! appears then double check that the profile specified from clients.json is spelled correctly.If there is a Bucket resource is in a CREATE_FAILED state. error then check that the profile name in clients.json isn't too long. Bucket names can only be 63 charactersThe profile name &quot;example&quot; will create the bucket name combine-example-connection-logging-us-east-1-663117128738 among others For versions prior to 3.13: Perform a npm i &amp;&amp; npm run build in the combine-tap/tap-dashboard directory.Perform a mvn clean install on the following directories: combine-commonscombine-tap/tap-apicombine-endpoints Perform a mvn clean package install on combine-account-automationRun the following command: mvn exec:java -q &quot;-Dexec.args=full --config-store-profile {CUSTOMER_NAME_FROM_CLIENTS.JSON} --bricks-release-version bricks_v_3_12&quot;  These prompts will only appear if the clients.json profile fails to load. Configuration Store File not found!Enter Client AWS Account ID: &lt;enter account ID&gt;Enter Shard ID (optional): CShroutEnter Region: us-east-1Enter Master Region: us-east-1Use JSON STS Token Credentials?: noEnter Client Account Access Key : &lt;enter access key&gt;Enter Client Account Access Key Secret: &lt;enter access key secret&gt;Enter Client Account Session Token (optional):Has User Management Account?: noEnter DevOps Bucket Encryption Key (optional):Loading parameter [bricksReleaseVersion] value [bricks_v_3_13_1_1] from store.Enter Client Certificate Name: CShroutBuild Top Secret region emulation?: yesBuild Secret region emulation?: noBuild GovCloud region emulation?: no  ","version":"Next","tagName":"h3"},{"title":"4. Retrieve keys and CA; see Connecting to the Bastion Server via SSH for full details on retrieval.â€‹","type":1,"pageTitle":"Building a Developer Shard","url":"/Combine AWS/developing/combine-101/build-dev-shard#4-retrieve-keys-and-ca-see-connecting-to-the-bastion-server-via-ssh-for-full-details-on-retrieval","content":" After locating admin.zip for the appropriate stack, unzip and locate ca.cert.pem  ","version":"Next","tagName":"h3"},{"title":"5. Set up the CA on the local system:â€‹","type":1,"pageTitle":"Building a Developer Shard","url":"/Combine AWS/developing/combine-101/build-dev-shard#5-set-up-the-ca-on-the-local-system","content":" ","version":"Next","tagName":"h3"},{"title":"Adding a Certificate Authority to Web Browsers in macOSâ€‹","type":1,"pageTitle":"Building a Developer Shard","url":"/Combine AWS/developing/combine-101/build-dev-shard#adding-a-certificate-authority-to-web-browsers-in-macos","content":" Hereâ€™s how to add a certificate authority (CA) to Safari, Chrome, and Firefox on macOS.  1. Add the CA to macOS Keychain (Affects Safari and Chrome) Steps:â€‹ Open Keychain Access: Use Spotlight (Command + Space) and search for Keychain Access. Import the Certificate: Go to File &gt; Import Items.Select the CA certificate file (ca.cert.pem). Trust the Certificate: Find the imported certificate in the Certificates category.Double-click the certificate to open its details.Expand the Trust section and set When using this certificate to Always Trust.Close the window, and authenticate with your macOS password. Restart Browsers: Restart Safari and Chrome to recognize the updated trusted CA.  2. Add the CA to Firefox (Separate Certificate Store) Steps:â€‹ Open Firefox Settings: Click the hamburger (3 line) menu in the upper right and select Settings Alternatively, Type about:preferences in the Firefox address bar. Find Privacy &amp; Security on the left hand side of the window. Manage Certificates: Scroll to the Certificates section and click View Certificates. Import the Certificate: Go to the Authorities tab.Click Import and select the CA certificate file (ca.cert.pem).Check Trust this CA to identify websites. Restart Firefox: Restart Firefox to apply the changes.  Key MAC OS Notesâ€‹  Global Trust: Adding a CA to the macOS Keychain applies system-wide, affecting all apps and browsers using the macOS trust store.Per-Browser Trust: Adding a CA to Firefox applies only to Firefox since it uses its own certificate store.    ","version":"Next","tagName":"h3"},{"title":"Adding a Certificate Authority to Web Browsers in Windows 11â€‹","type":1,"pageTitle":"Building a Developer Shard","url":"/Combine AWS/developing/combine-101/build-dev-shard#adding-a-certificate-authority-to-web-browsers-in-windows-11","content":" Hereâ€™s how to add a certificate authority (CA) to browsers (including Firefox) in Windows 11.  1. Add the CA to Windows Certificate Store (Affects Edge and Chrome) Steps:â€‹ Open Certificate Manager: Press Win + R, type mmc, and hit Enter.In the Microsoft Management Console (MMC), go to File &gt; Add/Remove Snap-in. Add Certificates Snap-in: In the dialog, select Certificates and click Add.Choose Computer account (not user account) and click Next, then Finish. Import the Certificate: Expand Trusted Root Certification Authorities and right-click on Certificates.Select All Tasks &gt; Import and follow the wizard to locate and add the CA certificate file (.crt or .cer). Restart Browsers: Restart Edge and Chrome to recognize the updated trusted CA.  2. Add the CA to Firefox (Separate Certificate Store) Firefox uses its own certificate store, so it requires separate configuration. Steps:â€‹ Open Firefox Settings: Click the hamburger (3 line) menu in the upper right and select Settings Alternatively, Type about:preferences in the Firefox address bar. Find Privacy &amp; Security on the left hand side of the window. Manage Certificates: Scroll to the Certificates section and click View Certificates. Import the Certificate: Go to the Authorities tab.Click Import and select the CA certificate file (ca.cert.pem).Check Trust this CA to identify websites. Restart Firefox: Restart Firefox to apply the changes.  Key Windows Notesâ€‹  Global Trust: Adding a CA to the Windows Certificate Store applies system-wide, affecting browsers like Edge and Chrome.Per-Browser Trust: Adding a CA to Firefox only affects Firefox, as it uses its own certificate store.    ","version":"Next","tagName":"h3"},{"title":"6. If the tool runs with no errors, you should be able to log into AWS account and see Combine resources being created.â€‹","type":1,"pageTitle":"Building a Developer Shard","url":"/Combine AWS/developing/combine-101/build-dev-shard#6-if-the-tool-runs-with-no-errors-you-should-be-able-to-log-into-aws-account-and-see-combine-resources-being-created","content":"","version":"Next","tagName":"h3"},{"title":"Connecting to the Bastion Server via SSH","type":0,"sectionRef":"#","url":"/Combine AWS/developing/combine-101/get-into-bastion","content":"Connecting to the Bastion Server via SSH Log in to the AWS interface.Navigate to &quot;Instances&quot;.Find the server instance name that matches the intended bastion target.Note the public IPv4 address / dns name. Navigate to S3 Find the bucket that matches the naming convention of the target host or shard. In this instance, navigate to the &quot;public&quot; directory. Locate the file &quot;admin.zip&quot;.Dig for &quot;Combine.pem&quot;. Digging for keys! Should all else fail find the list_s3_files.sh script in combine-aws\\combine-account-automation\\scriptsEnsure that the AWS CLI is properly configured by running aws configure listIf the AWS CLI has not been properly configured then run aws configure and enter the required information.Upon completion of list_s3_files.sh a file named s3_bucket_files.csv will be created in the same directory as the list_s3_files.sh script.This file contains two columns, Bucket Name and File Path for all buckets within the current account.Use filters in a speadsheet application to search the the desired Combine.pem key. (Or just grep the name of the key you're looking for) Connect via SSH Modify the permissions on the &quot;Combine.pem&quot; key with the following command chmod 600 /path/to/key/Combine.pem Use the Combine.pem key to ssh in to the target bastion server: ssh -i /path/to/key/Combine.pem ec2-user@ec2-1-2-3-4.compute-1.amazonaws.com ","keywords":"","version":"Next"}],"options":{"id":"default"}}